import {Button} from "../../../shared/ui/Button/Button.tsx";
import {useDispatch, useSelector} from "react-redux";
import { numberFactActions} from "../../../entity";
import {Card} from "../../../shared/ui/Card/Card.tsx";
import type {RootState} from "../../../app/providers/store/config/store.ts";

export const NumberFactResult: React.FC = () => {
    const dispatch = useDispatch();
    const lastQuery = useSelector((state: RootState) => state.numberFacts.lastQuery);

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('NumberFactResult rendered with lastQuery:', lastQuery);

    if (!lastQuery) {
        console.log('No lastQuery found, returning null');
        return null;
    }

    const { fact, number, type } = lastQuery;

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ fact
    console.log('Fact object:', fact, 'Type of fact:', typeof fact);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    if (!fact || typeof fact !== 'object') {
        console.error('Invalid fact object:', fact);
        return (
            <div style={{ width: '100%', padding: '0 15px' }}>
                <Card>
                    <div style={{ textAlign: 'center' }}>
                        <h2 style={{ color: '#dc3545' }}>‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
                        <p>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–∞</p>
                        <Button onClick={() => dispatch(numberFactActions.navigateToHome())}>
                            –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É
                        </Button>
                    </div>
                </Card>
            </div>
        );
    }

    const getTypeLabel = (type: string) => {
        switch (type) {
            case 'trivia': return '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç';
            case 'math': return '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç';
            case 'date': return '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –æ –¥–∞—Ç–µ';
            case 'year': return '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –æ –≥–æ–¥–µ';
            default: return '–§–∞–∫—Ç';
        }
    };

    const handleBackClick = () => {
        dispatch(numberFactActions.navigateToHome());
    };

    return (
        <div style={{ width: '100%', padding: '0 15px' }}>
            <Card>
                <h1 style={{
                    marginBottom: '24px',
                    textAlign: 'center',
                    color: '#2c3e50'
                }}>
                    –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                </h1>

                <div style={{
                    marginBottom: '24px',
                    padding: '16px',
                    background: '#f8f9fa',
                    borderRadius: '8px'
                }}>
                    <h3 style={{ marginBottom: '12px', color: '#495057' }}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ:</h3>
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '8px' }}>
                        <p><strong>–ß–∏—Å–ª–æ:</strong> {number === 'random' ? '–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ' : number}</p>
                        <p><strong>–¢–∏–ø:</strong> {getTypeLabel(type)}</p>
                        <p><strong>–ù–∞–π–¥–µ–Ω —Ñ–∞–∫—Ç:</strong> {fact?.found ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
                        <p><strong>–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ:</strong> {fact?.number || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}</p>
                        {fact?.date && <p><strong>–î–∞—Ç–∞:</strong> {String(fact.date)}</p>}
                        {fact?.year && <p><strong>–ì–æ–¥:</strong> {String(fact.year)}</p>}
                    </div>
                </div>

                <div style={{
                    background: fact?.found
                        ? 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'
                        : 'linear-gradient(135deg, #ffa726 0%, #fb8c00 100%)',
                    color: 'white',
                    borderRadius: '16px',
                    padding: '24px',
                    margin: '16px 0',
                    boxShadow: '0 8px 32px rgba(240, 147, 251, 0.3)'
                }}>
                    <h2 style={{ marginBottom: '16px', fontSize: '20px' }}>
                        {fact?.found ? getTypeLabel(type) : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–∫—Ç'}
                    </h2>
                    <p style={{ fontSize: '18px', lineHeight: '1.6' }}>
                        {fact?.text || '–§–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                    </p>

                    {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
                    {process.env.NODE_ENV === 'development' && (
                        <details style={{ marginTop: '16px', fontSize: '14px' }}>
                            <summary>üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
                            <pre style={{
                                background: 'rgba(255,255,255,0.2)',
                                padding: '8px',
                                borderRadius: '4px',
                                fontSize: '12px',
                                overflow: 'auto',
                                marginTop: '8px'
                            }}>
                {JSON.stringify({ fact, number, type }, null, 2)}
              </pre>
                        </details>
                    )}
                </div>

                <div style={{ textAlign: 'center', marginTop: '24px' }}>
                    <Button variant="secondary" onClick={handleBackClick}>
                        ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É
                    </Button>
                </div>
            </Card>
        </div>
    );
};
